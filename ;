#include "Core.hpp"
#include "nlohmann/json.hpp"
#include <string>
#include <typeindex>
#include <unordered_map>

KCOMPONENT()
struct Foo {
  int foo;
  float bar;
};
// NLOHMANN_DEFINE_TYPE_INTRUSIVE();

struct FieldData {
  char const *name;
  std::type_index type;
};

#define EXPAND(x) x
#define GET_MACRO(_0, _1, _2, _3, NAME, ...) NAME
#define PASTE(...)                                                             \
  EXPAND(GET_MACRO(__VA_ARGS__, PASTE3, PASTE2, PASTE1, PASTE0)(__VA_ARGS__))
#define PASTE0(fn, _0) fn(_00)
#define PASTE1(fn, _0, _1) PASTE0(fn, _0) PASTE0(fn, _1)
#define PASTE2(fn, _0, _1, _2) PASTE0(fn, _0) PASTE1(fn, _1, _2)
#define PASTE3(fn, _0, _1, _2, _3) PASTE0(fn, _0) PASTE2(fn, _1, _2, _3)

#define HI(its) sigma(its);
PASTE(HI, fart, pee)

NLOHMANN_JSON_EXPAND(NLOHMANN_JSON_PASTE(NLOHMANN_JSON_FROM, hi, there, bean,
                                         man))

NLOHMANN_JSON_PASTE(Foo, foo);
#define KCMP(name, ...)                                                        \
  struct Register##name {};

// KCMP(Fart, FIELD(int, pee) FIELD(float, poop));

std::unordered_map<std::string, int> m_mape = {};
